security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: 'plaintext'     # mots de passe en clair

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        utilisateurs_en_memoire:                            # nom libre (en français pour la démonstration)
          memory:                                           # mot-clé : utilisateurs stockés en mémoire
              users:                                        # mot-clé : liste des utilisateurs
                  broots:                                   # utilisateur 1 : le login est 'broots'
                      password: 'toto'                      #                 le mot de passe est 'toto'
                      roles: ['ROLE_USER']                  #                 un seul rôle (nom commence par 'ROLE_')
                  parker:                                   # utilisateur 2 (avec deux rôles)
                      password: 'admin'
                      roles: ['ROLE_ADMIN', 'ROLE_KILLER']
                  jarod: { password: 'qwerty', roles: ['ROLE_SUPER_ADMIN'] }        # utilisateur 3 (autre syntaxe)

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:                                        # nom du firewall : le nom est libre
            lazy: true                               # gestion du lancement de la session (à étudier)
            provider: utilisateurs_en_memoire        # désigne les utilisateurs concernés par le firewall
            http_basic: ~                            # authentification HTTP

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER                            # un admin a les droits d'une user avec les siens en plus
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_BANQUE]      # super_admin = sur-ensemble d'admin (et donc user) et de banque

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # URL "/" (et uniquement celle-là) : pas besoin d'authentification
        - { path: ^/$, roles: PUBLIC_ACCESS }
        # URLs commençant par "/sandbox" : il faut être au moins ADMIN (donc ADMIN ou SUPER_ADMIN ici)
        - { path: ^/sandbox, roles: ROLE_ADMIN }
        # URLs commençant par "/produit/list" : il faut être authentifié quel que soit le rôle
        - { path: ^/produit/list, roles: IS_AUTHENTICATED_FULLY }
        # toutes les URLs commençant par "n'importe quoi" (donc toutes les autres) : être au moins USER ou KILLER
        - { path: ^/, roles: [ROLE_USER, ROLE_KILLER] }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
